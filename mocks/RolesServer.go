// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"
	rolespb "users/gen/grpc/roles/pb"

	mock "github.com/stretchr/testify/mock"
)

// RolesServer is an autogenerated mock type for the RolesServer type
type RolesServer struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *RolesServer) Add(_a0 context.Context, _a1 *rolespb.AddRequest) (*rolespb.AddResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *rolespb.AddResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.AddRequest) *rolespb.AddResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.AddResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.AddRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *RolesServer) List(_a0 context.Context, _a1 *rolespb.ListRequest) (*rolespb.StoredRoleCollection, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *rolespb.StoredRoleCollection
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.ListRequest) *rolespb.StoredRoleCollection); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.StoredRoleCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: _a0, _a1
func (_m *RolesServer) Remove(_a0 context.Context, _a1 *rolespb.RemoveRequest) (*rolespb.RemoveResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *rolespb.RemoveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.RemoveRequest) *rolespb.RemoveResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.RemoveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.RemoveRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: _a0, _a1
func (_m *RolesServer) Show(_a0 context.Context, _a1 *rolespb.ShowRequest) (*rolespb.ShowResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *rolespb.ShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.ShowRequest) *rolespb.ShowResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.ShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.ShowRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *RolesServer) Update(_a0 context.Context, _a1 *rolespb.UpdateRequest) (*rolespb.UpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *rolespb.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.UpdateRequest) *rolespb.UpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.UpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
