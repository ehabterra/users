// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	rolespb "users/gen/grpc/roles/pb"
)

// RolesClient is an autogenerated mock type for the RolesClient type
type RolesClient struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *RolesClient) Add(ctx context.Context, in *rolespb.AddRequest, opts ...grpc.CallOption) (*rolespb.AddResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rolespb.AddResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.AddRequest, ...grpc.CallOption) *rolespb.AddResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.AddResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.AddRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *RolesClient) List(ctx context.Context, in *rolespb.ListRequest, opts ...grpc.CallOption) (*rolespb.StoredRoleCollection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rolespb.StoredRoleCollection
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.ListRequest, ...grpc.CallOption) *rolespb.StoredRoleCollection); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.StoredRoleCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, in, opts
func (_m *RolesClient) Remove(ctx context.Context, in *rolespb.RemoveRequest, opts ...grpc.CallOption) (*rolespb.RemoveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rolespb.RemoveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.RemoveRequest, ...grpc.CallOption) *rolespb.RemoveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.RemoveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.RemoveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: ctx, in, opts
func (_m *RolesClient) Show(ctx context.Context, in *rolespb.ShowRequest, opts ...grpc.CallOption) (*rolespb.ShowResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rolespb.ShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.ShowRequest, ...grpc.CallOption) *rolespb.ShowResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.ShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.ShowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *RolesClient) Update(ctx context.Context, in *rolespb.UpdateRequest, opts ...grpc.CallOption) (*rolespb.UpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *rolespb.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *rolespb.UpdateRequest, ...grpc.CallOption) *rolespb.UpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolespb.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *rolespb.UpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
