// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	userspb "users/gen/grpc/users/pb"
)

// UsersClient is an autogenerated mock type for the UsersClient type
type UsersClient struct {
	mock.Mock
}

// Activate provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) Activate(ctx context.Context, in *userspb.ActivateRequest, opts ...grpc.CallOption) (*userspb.ActivateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userspb.ActivateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *userspb.ActivateRequest, ...grpc.CallOption) *userspb.ActivateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userspb.ActivateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userspb.ActivateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Add provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) Add(ctx context.Context, in *userspb.AddRequest, opts ...grpc.CallOption) (*userspb.AddResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userspb.AddResponse
	if rf, ok := ret.Get(0).(func(context.Context, *userspb.AddRequest, ...grpc.CallOption) *userspb.AddResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userspb.AddResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userspb.AddRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) List(ctx context.Context, in *userspb.ListRequest, opts ...grpc.CallOption) (*userspb.StoredUserCollection, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userspb.StoredUserCollection
	if rf, ok := ret.Get(0).(func(context.Context, *userspb.ListRequest, ...grpc.CallOption) *userspb.StoredUserCollection); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userspb.StoredUserCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userspb.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) Remove(ctx context.Context, in *userspb.RemoveRequest, opts ...grpc.CallOption) (*userspb.RemoveResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userspb.RemoveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *userspb.RemoveRequest, ...grpc.CallOption) *userspb.RemoveResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userspb.RemoveResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userspb.RemoveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) Show(ctx context.Context, in *userspb.ShowRequest, opts ...grpc.CallOption) (*userspb.ShowResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userspb.ShowResponse
	if rf, ok := ret.Get(0).(func(context.Context, *userspb.ShowRequest, ...grpc.CallOption) *userspb.ShowResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userspb.ShowResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userspb.ShowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *UsersClient) Update(ctx context.Context, in *userspb.UpdateRequest, opts ...grpc.CallOption) (*userspb.UpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *userspb.UpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *userspb.UpdateRequest, ...grpc.CallOption) *userspb.UpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*userspb.UpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userspb.UpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
