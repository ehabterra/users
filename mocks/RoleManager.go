// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	roles "users/gen/roles"

	mock "github.com/stretchr/testify/mock"
)

// RoleManager is an autogenerated mock type for the RoleManager type
type RoleManager struct {
	mock.Mock
}

// Add provides a mock function with given fields: p
func (_m *RoleManager) Add(p *roles.Role) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*roles.Role) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *RoleManager) List() (roles.StoredRoleCollection, error) {
	ret := _m.Called()

	var r0 roles.StoredRoleCollection
	if rf, ok := ret.Get(0).(func() roles.StoredRoleCollection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(roles.StoredRoleCollection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: name
func (_m *RoleManager) Remove(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Show provides a mock function with given fields: name
func (_m *RoleManager) Show(name string) (*roles.StoredRole, error) {
	ret := _m.Called(name)

	var r0 *roles.StoredRole
	if rf, ok := ret.Get(0).(func(string) *roles.StoredRole); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*roles.StoredRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: p
func (_m *RoleManager) Update(p *roles.Role) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*roles.Role) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
