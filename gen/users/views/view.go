// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users views
//
// Command:
// $ goa gen users/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// StoredUserCollection is the viewed result type that is projected based on a
// view.
type StoredUserCollection struct {
	// Type to project
	Projected StoredUserCollectionView
	// View to render
	View string
}

// StoredUser is the viewed result type that is projected based on a view.
type StoredUser struct {
	// Type to project
	Projected *StoredUserView
	// View to render
	View string
}

// StoredUserCollectionView is a type that runs validations on a projected type.
type StoredUserCollectionView []*StoredUserView

// StoredUserView is a type that runs validations on a projected type.
type StoredUserView struct {
	// Email of the user
	Email *string
	// First Name of the user
	Firstname *string
	// Last Name of user
	Lastname *string
	// Is user active.
	Isactive *bool
	// user role
	Role *string
}

var (
	// StoredUserCollectionMap is a map of attribute names in result type
	// StoredUserCollection indexed by view name.
	StoredUserCollectionMap = map[string][]string{
		"default": []string{
			"email",
			"role",
			"firstname",
			"lastname",
			"isactive",
		},
		"tiny": []string{
			"email",
			"role",
			"isactive",
		},
	}
	// StoredUserMap is a map of attribute names in result type StoredUser indexed
	// by view name.
	StoredUserMap = map[string][]string{
		"default": []string{
			"email",
			"role",
			"firstname",
			"lastname",
			"isactive",
		},
		"tiny": []string{
			"email",
			"role",
			"isactive",
		},
	}
)

// ValidateStoredUserCollection runs the validations defined on the viewed
// result type StoredUserCollection.
func ValidateStoredUserCollection(result StoredUserCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredUserCollectionView(result.Projected)
	case "tiny":
		err = ValidateStoredUserCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredUser runs the validations defined on the viewed result type
// StoredUser.
func ValidateStoredUser(result *StoredUser) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredUserView(result.Projected)
	case "tiny":
		err = ValidateStoredUserViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredUserCollectionView runs the validations defined on
// StoredUserCollectionView using the "default" view.
func ValidateStoredUserCollectionView(result StoredUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredUserCollectionViewTiny runs the validations defined on
// StoredUserCollectionView using the "tiny" view.
func ValidateStoredUserCollectionViewTiny(result StoredUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredUserViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredUserView runs the validations defined on StoredUserView using
// the "default" view.
func ValidateStoredUserView(result *StoredUserView) (err error) {
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "result"))
	}
	if result.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "result"))
	}
	if result.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.email", *result.Email, ".+@.+\\..{1,6}"))
	}
	if result.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.role", *result.Role, "[a-z]+[a-z0-9]*"))
	}
	if result.Firstname != nil {
		if utf8.RuneCountInString(*result.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.firstname", *result.Firstname, utf8.RuneCountInString(*result.Firstname), 100, false))
		}
	}
	if result.Lastname != nil {
		if utf8.RuneCountInString(*result.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.lastname", *result.Lastname, utf8.RuneCountInString(*result.Lastname), 100, false))
		}
	}
	return
}

// ValidateStoredUserViewTiny runs the validations defined on StoredUserView
// using the "tiny" view.
func ValidateStoredUserViewTiny(result *StoredUserView) (err error) {
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "result"))
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.email", *result.Email, ".+@.+\\..{1,6}"))
	}
	if result.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.role", *result.Role, "[a-z]+[a-z0-9]*"))
	}
	return
}
