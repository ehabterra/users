// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users service
//
// Command:
// $ goa gen users/design

package users

import (
	"context"
	usersviews "users/gen/users/views"
)

// The users service performs user data.
type Service interface {
	// List all stored users
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	List(context.Context, *ListPayload) (res StoredUserCollection, view string, err error)
	// Show user by Email
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "tiny"
	Show(context.Context, *ShowPayload) (res *StoredUser, view string, err error)
	// Add new user and return email.
	Add(context.Context, *User) (res string, err error)
	// Update existing user and return email.
	Update(context.Context, *User) (res string, err error)
	// Remove user from users data
	Remove(context.Context, *RemovePayload) (err error)
	// Activate users by emails
	Activate(context.Context, []string) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "users"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [6]string{"list", "show", "add", "update", "remove", "activate"}

// ListPayload is the payload type of the users service list method.
type ListPayload struct {
	// View to render
	View *string
}

// StoredUserCollection is the result type of the users service list method.
type StoredUserCollection []*StoredUser

// ShowPayload is the payload type of the users service show method.
type ShowPayload struct {
	// Email of user to show
	Email string
	// View to render
	View *string
}

// StoredUser is the result type of the users service show method.
type StoredUser struct {
	// Email of the user
	Email string
	// First Name of the user
	Firstname string
	// Last Name of user
	Lastname string
	// Is user active.
	Isactive bool
	// user role
	Role string
}

// User is the payload type of the users service add method.
type User struct {
	// Email of the user
	Email string
	// First Name of the user
	Firstname string
	// Last Name of user
	Lastname string
	// user role
	Role string
	// Is user active.
	Isactive bool
}

// RemovePayload is the payload type of the users service remove method.
type RemovePayload struct {
	// Email of user to remove
	Email string
}

// NotFound is the type returned when attempting to show or delete a user that
// does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing user
	ID string
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to show or delete a user that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// NewStoredUserCollection initializes result type StoredUserCollection from
// viewed result type StoredUserCollection.
func NewStoredUserCollection(vres usersviews.StoredUserCollection) StoredUserCollection {
	var res StoredUserCollection
	switch vres.View {
	case "default", "":
		res = newStoredUserCollection(vres.Projected)
	case "tiny":
		res = newStoredUserCollectionTiny(vres.Projected)
	}
	return res
}

// NewViewedStoredUserCollection initializes viewed result type
// StoredUserCollection from result type StoredUserCollection using the given
// view.
func NewViewedStoredUserCollection(res StoredUserCollection, view string) usersviews.StoredUserCollection {
	var vres usersviews.StoredUserCollection
	switch view {
	case "default", "":
		p := newStoredUserCollectionView(res)
		vres = usersviews.StoredUserCollection{Projected: p, View: "default"}
	case "tiny":
		p := newStoredUserCollectionViewTiny(res)
		vres = usersviews.StoredUserCollection{Projected: p, View: "tiny"}
	}
	return vres
}

// NewStoredUser initializes result type StoredUser from viewed result type
// StoredUser.
func NewStoredUser(vres *usersviews.StoredUser) *StoredUser {
	var res *StoredUser
	switch vres.View {
	case "default", "":
		res = newStoredUser(vres.Projected)
	case "tiny":
		res = newStoredUserTiny(vres.Projected)
	}
	return res
}

// NewViewedStoredUser initializes viewed result type StoredUser from result
// type StoredUser using the given view.
func NewViewedStoredUser(res *StoredUser, view string) *usersviews.StoredUser {
	var vres *usersviews.StoredUser
	switch view {
	case "default", "":
		p := newStoredUserView(res)
		vres = &usersviews.StoredUser{Projected: p, View: "default"}
	case "tiny":
		p := newStoredUserViewTiny(res)
		vres = &usersviews.StoredUser{Projected: p, View: "tiny"}
	}
	return vres
}

// newStoredUserCollection converts projected type StoredUserCollection to
// service type StoredUserCollection.
func newStoredUserCollection(vres usersviews.StoredUserCollectionView) StoredUserCollection {
	res := make(StoredUserCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredUser(n)
	}
	return res
}

// newStoredUserCollectionTiny converts projected type StoredUserCollection to
// service type StoredUserCollection.
func newStoredUserCollectionTiny(vres usersviews.StoredUserCollectionView) StoredUserCollection {
	res := make(StoredUserCollection, len(vres))
	for i, n := range vres {
		res[i] = newStoredUserTiny(n)
	}
	return res
}

// newStoredUserCollectionView projects result type StoredUserCollection to
// projected type StoredUserCollectionView using the "default" view.
func newStoredUserCollectionView(res StoredUserCollection) usersviews.StoredUserCollectionView {
	vres := make(usersviews.StoredUserCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredUserView(n)
	}
	return vres
}

// newStoredUserCollectionViewTiny projects result type StoredUserCollection to
// projected type StoredUserCollectionView using the "tiny" view.
func newStoredUserCollectionViewTiny(res StoredUserCollection) usersviews.StoredUserCollectionView {
	vres := make(usersviews.StoredUserCollectionView, len(res))
	for i, n := range res {
		vres[i] = newStoredUserViewTiny(n)
	}
	return vres
}

// newStoredUser converts projected type StoredUser to service type StoredUser.
func newStoredUser(vres *usersviews.StoredUserView) *StoredUser {
	res := &StoredUser{}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Role != nil {
		res.Role = *vres.Role
	}
	if vres.Firstname != nil {
		res.Firstname = *vres.Firstname
	}
	if vres.Lastname != nil {
		res.Lastname = *vres.Lastname
	}
	if vres.Isactive != nil {
		res.Isactive = *vres.Isactive
	}
	if vres.Isactive == nil {
		res.Isactive = true
	}
	return res
}

// newStoredUserTiny converts projected type StoredUser to service type
// StoredUser.
func newStoredUserTiny(vres *usersviews.StoredUserView) *StoredUser {
	res := &StoredUser{}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Role != nil {
		res.Role = *vres.Role
	}
	if vres.Isactive != nil {
		res.Isactive = *vres.Isactive
	}
	if vres.Isactive == nil {
		res.Isactive = true
	}
	return res
}

// newStoredUserView projects result type StoredUser to projected type
// StoredUserView using the "default" view.
func newStoredUserView(res *StoredUser) *usersviews.StoredUserView {
	vres := &usersviews.StoredUserView{
		Email:     &res.Email,
		Firstname: &res.Firstname,
		Lastname:  &res.Lastname,
		Isactive:  &res.Isactive,
		Role:      &res.Role,
	}
	return vres
}

// newStoredUserViewTiny projects result type StoredUser to projected type
// StoredUserView using the "tiny" view.
func newStoredUserViewTiny(res *StoredUser) *usersviews.StoredUserView {
	vres := &usersviews.StoredUserView{
		Email:    &res.Email,
		Isactive: &res.Isactive,
		Role:     &res.Role,
	}
	return vres
}
