// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users gRPC client types
//
// Command:
// $ goa gen users/design

package client

import (
	"unicode/utf8"
	userspb "users/gen/grpc/users/pb"
	users "users/gen/users"
	usersviews "users/gen/users/views"

	goa "goa.design/goa/v3/pkg"
)

// NewListRequest builds the gRPC request type from the payload of the "list"
// endpoint of the "users" service.
func NewListRequest() *userspb.ListRequest {
	message := &userspb.ListRequest{}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the "users"
// service from the gRPC response type.
func NewListResult(message *userspb.StoredUserCollection) usersviews.StoredUserCollectionView {
	result := make([]*usersviews.StoredUserView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &usersviews.StoredUserView{
			Email:     &val.Email,
			Firstname: &val.Firstname,
			Lastname:  &val.Lastname,
			Isactive:  &val.Isactive,
			Role:      &val.Role,
		}
	}
	return result
}

// NewShowRequest builds the gRPC request type from the payload of the "show"
// endpoint of the "users" service.
func NewShowRequest(payload *users.ShowPayload) *userspb.ShowRequest {
	message := &userspb.ShowRequest{
		Email: payload.Email,
	}
	return message
}

// NewShowResult builds the result type of the "show" endpoint of the "users"
// service from the gRPC response type.
func NewShowResult(message *userspb.ShowResponse) *usersviews.StoredUserView {
	result := &usersviews.StoredUserView{
		Email:     &message.Email,
		Firstname: &message.Firstname,
		Lastname:  &message.Lastname,
		Isactive:  &message.Isactive,
		Role:      &message.Role,
	}
	return result
}

// NewShowNotFoundError builds the error type of the "show" endpoint of the
// "users" service from the gRPC error response type.
func NewShowNotFoundError(message *userspb.ShowNotFoundError) *users.NotFound {
	er := &users.NotFound{
		Message: message.Message_,
		ID:      message.Id,
	}
	return er
}

// NewAddRequest builds the gRPC request type from the payload of the "add"
// endpoint of the "users" service.
func NewAddRequest(payload *users.User) *userspb.AddRequest {
	message := &userspb.AddRequest{
		Email:     payload.Email,
		Firstname: payload.Firstname,
		Lastname:  payload.Lastname,
		Role:      payload.Role,
		Isactive:  payload.Isactive,
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "users"
// service from the gRPC response type.
func NewAddResult(message *userspb.AddResponse) string {
	result := message.Field
	return result
}

// NewUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "users" service.
func NewUpdateRequest(payload *users.User) *userspb.UpdateRequest {
	message := &userspb.UpdateRequest{
		Email:     payload.Email,
		Firstname: payload.Firstname,
		Lastname:  payload.Lastname,
		Role:      payload.Role,
		Isactive:  payload.Isactive,
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the
// "users" service from the gRPC response type.
func NewUpdateResult(message *userspb.UpdateResponse) string {
	result := message.Field
	return result
}

// NewRemoveRequest builds the gRPC request type from the payload of the
// "remove" endpoint of the "users" service.
func NewRemoveRequest(payload *users.RemovePayload) *userspb.RemoveRequest {
	message := &userspb.RemoveRequest{
		Email: payload.Email,
	}
	return message
}

// NewActivateRequest builds the gRPC request type from the payload of the
// "activate" endpoint of the "users" service.
func NewActivateRequest(payload []string) *userspb.ActivateRequest {
	message := &userspb.ActivateRequest{}
	message.Field = make([]string, len(payload))
	for i, val := range payload {
		message.Field[i] = val
	}
	return message
}

// ValidateStoredUserCollection runs the validations defined on
// StoredUserCollection.
func ValidateStoredUserCollection(message *userspb.StoredUserCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateStoredUser(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStoredUser runs the validations defined on StoredUser.
func ValidateStoredUser(message *userspb.StoredUser) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.email", message.Email, ".+@.+\\..{1,6}"))
	if utf8.RuneCountInString(message.Firstname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.firstname", message.Firstname, utf8.RuneCountInString(message.Firstname), 100, false))
	}
	if utf8.RuneCountInString(message.Lastname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.lastname", message.Lastname, utf8.RuneCountInString(message.Lastname), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.role", message.Role, "[a-z]+[a-z0-9]*"))
	return
}

// ValidateShowResponse runs the validations defined on ShowResponse.
func ValidateShowResponse(message *userspb.ShowResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.email", message.Email, ".+@.+\\..{1,6}"))
	if utf8.RuneCountInString(message.Firstname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.firstname", message.Firstname, utf8.RuneCountInString(message.Firstname), 100, false))
	}
	if utf8.RuneCountInString(message.Lastname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.lastname", message.Lastname, utf8.RuneCountInString(message.Lastname), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.role", message.Role, "[a-z]+[a-z0-9]*"))
	return
}
