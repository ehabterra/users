// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users gRPC client encoders and decoders
//
// Command:
// $ goa gen users/design

package client

import (
	"context"
	userspb "users/gen/grpc/users/pb"
	users "users/gen/users"
	usersviews "users/gen/users/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildListFunc builds the remote method to invoke for "users" service "list"
// endpoint.
func BuildListFunc(grpccli userspb.UsersClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*userspb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &userspb.ListRequest{}, opts...)
	}
}

// EncodeListRequest encodes requests sent to users list endpoint.
func EncodeListRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*users.ListPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "list", "*users.ListPayload", v)
	}
	if payload.View != nil {
		(*md).Append("view", *payload.View)
	}
	return NewListRequest(), nil
}

// DecodeListResponse decodes responses from the users list endpoint.
func DecodeListResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userspb.StoredUserCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "list", "*userspb.StoredUserCollection", v)
	}
	res := NewListResult(message)
	vres := usersviews.StoredUserCollection{Projected: res, View: view}
	if err := usersviews.ValidateStoredUserCollection(vres); err != nil {
		return nil, err
	}
	return users.NewStoredUserCollection(vres), nil
}

// BuildShowFunc builds the remote method to invoke for "users" service "show"
// endpoint.
func BuildShowFunc(grpccli userspb.UsersClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Show(ctx, reqpb.(*userspb.ShowRequest), opts...)
		}
		return grpccli.Show(ctx, &userspb.ShowRequest{}, opts...)
	}
}

// EncodeShowRequest encodes requests sent to users show endpoint.
func EncodeShowRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*users.ShowPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "show", "*users.ShowPayload", v)
	}
	if payload.View != nil {
		(*md).Append("view", *payload.View)
	}
	return NewShowRequest(payload), nil
}

// DecodeShowResponse decodes responses from the users show endpoint.
func DecodeShowResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userspb.ShowResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "show", "*userspb.ShowResponse", v)
	}
	res := NewShowResult(message)
	vres := &usersviews.StoredUser{Projected: res, View: view}
	if err := usersviews.ValidateStoredUser(vres); err != nil {
		return nil, err
	}
	return users.NewStoredUser(vres), nil
}

// BuildAddFunc builds the remote method to invoke for "users" service "add"
// endpoint.
func BuildAddFunc(grpccli userspb.UsersClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*userspb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &userspb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to users add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*users.User)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "add", "*users.User", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the users add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*userspb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "add", "*userspb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}

// BuildUpdateFunc builds the remote method to invoke for "users" service
// "update" endpoint.
func BuildUpdateFunc(grpccli userspb.UsersClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Update(ctx, reqpb.(*userspb.UpdateRequest), opts...)
		}
		return grpccli.Update(ctx, &userspb.UpdateRequest{}, opts...)
	}
}

// EncodeUpdateRequest encodes requests sent to users update endpoint.
func EncodeUpdateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*users.User)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "update", "*users.User", v)
	}
	return NewUpdateRequest(payload), nil
}

// DecodeUpdateResponse decodes responses from the users update endpoint.
func DecodeUpdateResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*userspb.UpdateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "update", "*userspb.UpdateResponse", v)
	}
	res := NewUpdateResult(message)
	return res, nil
}

// BuildRemoveFunc builds the remote method to invoke for "users" service
// "remove" endpoint.
func BuildRemoveFunc(grpccli userspb.UsersClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Remove(ctx, reqpb.(*userspb.RemoveRequest), opts...)
		}
		return grpccli.Remove(ctx, &userspb.RemoveRequest{}, opts...)
	}
}

// EncodeRemoveRequest encodes requests sent to users remove endpoint.
func EncodeRemoveRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*users.RemovePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "remove", "*users.RemovePayload", v)
	}
	return NewRemoveRequest(payload), nil
}

// BuildActivateFunc builds the remote method to invoke for "users" service
// "activate" endpoint.
func BuildActivateFunc(grpccli userspb.UsersClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Activate(ctx, reqpb.(*userspb.ActivateRequest), opts...)
		}
		return grpccli.Activate(ctx, &userspb.ActivateRequest{}, opts...)
	}
}

// EncodeActivateRequest encodes requests sent to users activate endpoint.
func EncodeActivateRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.([]string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "activate", "[]string", v)
	}
	return NewActivateRequest(payload), nil
}
