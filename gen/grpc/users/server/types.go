// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users gRPC server types
//
// Command:
// $ goa gen users/design

package server

import (
	"unicode/utf8"
	userspb "users/gen/grpc/users/pb"
	users "users/gen/users"
	usersviews "users/gen/users/views"

	goa "goa.design/goa/v3/pkg"
)

// NewListPayload builds the payload of the "list" endpoint of the "users"
// service from the gRPC request type.
func NewListPayload(view *string) *users.ListPayload {
	v := &users.ListPayload{}
	v.View = view
	return v
}

// NewStoredUserCollection builds the gRPC response type from the result of the
// "list" endpoint of the "users" service.
func NewStoredUserCollection(result usersviews.StoredUserCollectionView) *userspb.StoredUserCollection {
	message := &userspb.StoredUserCollection{}
	message.Field = make([]*userspb.StoredUser, len(result))
	for i, val := range result {
		message.Field[i] = &userspb.StoredUser{}
		if val.Email != nil {
			message.Field[i].Email = *val.Email
		}
		if val.Firstname != nil {
			message.Field[i].Firstname = *val.Firstname
		}
		if val.Lastname != nil {
			message.Field[i].Lastname = *val.Lastname
		}
		if val.Isactive != nil {
			message.Field[i].Isactive = *val.Isactive
		}
		if val.Role != nil {
			message.Field[i].Role = *val.Role
		}
		if val.Isactive == nil {
			message.Field[i].Isactive = true
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the "users"
// service from the gRPC request type.
func NewShowPayload(message *userspb.ShowRequest, view *string) *users.ShowPayload {
	v := &users.ShowPayload{
		Email: message.Email,
	}
	v.View = view
	return v
}

// NewShowResponse builds the gRPC response type from the result of the "show"
// endpoint of the "users" service.
func NewShowResponse(result *usersviews.StoredUserView) *userspb.ShowResponse {
	message := &userspb.ShowResponse{}
	if result.Email != nil {
		message.Email = *result.Email
	}
	if result.Firstname != nil {
		message.Firstname = *result.Firstname
	}
	if result.Lastname != nil {
		message.Lastname = *result.Lastname
	}
	if result.Isactive != nil {
		message.Isactive = *result.Isactive
	}
	if result.Role != nil {
		message.Role = *result.Role
	}
	if result.Isactive == nil {
		message.Isactive = true
	}
	return message
}

// NewShowNotFoundError builds the gRPC error response type from the error of
// the "show" endpoint of the "users" service.
func NewShowNotFoundError(er *users.NotFound) *userspb.ShowNotFoundError {
	message := &userspb.ShowNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "users"
// service from the gRPC request type.
func NewAddPayload(message *userspb.AddRequest) *users.User {
	v := &users.User{
		Email:     message.Email,
		Firstname: message.Firstname,
		Lastname:  message.Lastname,
		Role:      message.Role,
		Isactive:  message.Isactive,
	}
	return v
}

// NewAddResponse builds the gRPC response type from the result of the "add"
// endpoint of the "users" service.
func NewAddResponse(result string) *userspb.AddResponse {
	message := &userspb.AddResponse{}
	message.Field = result
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "users"
// service from the gRPC request type.
func NewUpdatePayload(message *userspb.UpdateRequest) *users.User {
	v := &users.User{
		Email:     message.Email,
		Firstname: message.Firstname,
		Lastname:  message.Lastname,
		Role:      message.Role,
		Isactive:  message.Isactive,
	}
	return v
}

// NewUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "users" service.
func NewUpdateResponse(result string) *userspb.UpdateResponse {
	message := &userspb.UpdateResponse{}
	message.Field = result
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the "users"
// service from the gRPC request type.
func NewRemovePayload(message *userspb.RemoveRequest) *users.RemovePayload {
	v := &users.RemovePayload{
		Email: message.Email,
	}
	return v
}

// NewRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "users" service.
func NewRemoveResponse() *userspb.RemoveResponse {
	message := &userspb.RemoveResponse{}
	return message
}

// NewActivatePayload builds the payload of the "activate" endpoint of the
// "users" service from the gRPC request type.
func NewActivatePayload(message *userspb.ActivateRequest) []string {
	v := make([]string, len(message.Field))
	for i, val := range message.Field {
		v[i] = val
	}
	return v
}

// NewActivateResponse builds the gRPC response type from the result of the
// "activate" endpoint of the "users" service.
func NewActivateResponse() *userspb.ActivateResponse {
	message := &userspb.ActivateResponse{}
	return message
}

// ValidateAddRequest runs the validations defined on AddRequest.
func ValidateAddRequest(message *userspb.AddRequest) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.email", message.Email, ".+@.+\\..{1,6}"))
	if utf8.RuneCountInString(message.Firstname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.firstname", message.Firstname, utf8.RuneCountInString(message.Firstname), 100, false))
	}
	if utf8.RuneCountInString(message.Lastname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.lastname", message.Lastname, utf8.RuneCountInString(message.Lastname), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.role", message.Role, "[a-z]+[a-z0-9]*"))
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *userspb.UpdateRequest) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.email", message.Email, ".+@.+\\..{1,6}"))
	if utf8.RuneCountInString(message.Firstname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.firstname", message.Firstname, utf8.RuneCountInString(message.Firstname), 100, false))
	}
	if utf8.RuneCountInString(message.Lastname) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.lastname", message.Lastname, utf8.RuneCountInString(message.Lastname), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.role", message.Role, "[a-z]+[a-z0-9]*"))
	return
}
