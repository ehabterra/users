// Code generated by goa v3.2.3, DO NOT EDIT.
//
// roles gRPC client CLI support package
//
// Command:
// $ goa gen users/design

package client

import (
	"encoding/json"
	"fmt"
	rolespb "users/gen/grpc/roles/pb"
	roles "users/gen/roles"

	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the roles list endpoint from CLI
// flags.
func BuildListPayload(rolesListView string) (*roles.ListPayload, error) {
	var err error
	var view *string
	{
		if rolesListView != "" {
			view = &rolesListView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &roles.ListPayload{}
	v.View = view

	return v, nil
}

// BuildShowPayload builds the payload for the roles show endpoint from CLI
// flags.
func BuildShowPayload(rolesShowMessage string, rolesShowView string) (*roles.ShowPayload, error) {
	var err error
	var message rolespb.ShowRequest
	{
		if rolesShowMessage != "" {
			err = json.Unmarshal([]byte(rolesShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Unde consectetur nam.\"\n   }'")
			}
		}
	}
	var view *string
	{
		if rolesShowView != "" {
			view = &rolesShowView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &roles.ShowPayload{
		Name: message.Name,
	}
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the roles add endpoint from CLI flags.
func BuildAddPayload(rolesAddMessage string) (*roles.Role, error) {
	var err error
	var message rolespb.AddRequest
	{
		if rolesAddMessage != "" {
			err = json.Unmarshal([]byte(rolesAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Administrator\",\n      \"name\": \"admin\"\n   }'")
			}
		}
	}
	v := &roles.Role{
		Name: message.Name,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the roles update endpoint from CLI
// flags.
func BuildUpdatePayload(rolesUpdateMessage string) (*roles.Role, error) {
	var err error
	var message rolespb.UpdateRequest
	{
		if rolesUpdateMessage != "" {
			err = json.Unmarshal([]byte(rolesUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Administrator\",\n      \"name\": \"admin\"\n   }'")
			}
		}
	}
	v := &roles.Role{
		Name: message.Name,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}

	return v, nil
}

// BuildRemovePayload builds the payload for the roles remove endpoint from CLI
// flags.
func BuildRemovePayload(rolesRemoveMessage string) (*roles.RemovePayload, error) {
	var err error
	var message rolespb.RemoveRequest
	{
		if rolesRemoveMessage != "" {
			err = json.Unmarshal([]byte(rolesRemoveMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Repellat unde dolores ut rerum.\"\n   }'")
			}
		}
	}
	v := &roles.RemovePayload{
		Name: message.Name,
	}

	return v, nil
}
