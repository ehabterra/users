// Code generated by goa v3.2.3, DO NOT EDIT.
//
// roles gRPC server types
//
// Command:
// $ goa gen users/design

package server

import (
	rolespb "users/gen/grpc/roles/pb"
	roles "users/gen/roles"
	rolesviews "users/gen/roles/views"

	goa "goa.design/goa/v3/pkg"
)

// NewListPayload builds the payload of the "list" endpoint of the "roles"
// service from the gRPC request type.
func NewListPayload(view *string) *roles.ListPayload {
	v := &roles.ListPayload{}
	v.View = view
	return v
}

// NewStoredRoleCollection builds the gRPC response type from the result of the
// "list" endpoint of the "roles" service.
func NewStoredRoleCollection(result rolesviews.StoredRoleCollectionView) *rolespb.StoredRoleCollection {
	message := &rolespb.StoredRoleCollection{}
	message.Field = make([]*rolespb.StoredRole, len(result))
	for i, val := range result {
		message.Field[i] = &rolespb.StoredRole{}
		if val.Name != nil {
			message.Field[i].Name = *val.Name
		}
		if val.Description != nil {
			message.Field[i].Description = *val.Description
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the "roles"
// service from the gRPC request type.
func NewShowPayload(message *rolespb.ShowRequest, view *string) *roles.ShowPayload {
	v := &roles.ShowPayload{
		Name: message.Name,
	}
	v.View = view
	return v
}

// NewShowResponse builds the gRPC response type from the result of the "show"
// endpoint of the "roles" service.
func NewShowResponse(result *rolesviews.StoredRoleView) *rolespb.ShowResponse {
	message := &rolespb.ShowResponse{}
	if result.Name != nil {
		message.Name = *result.Name
	}
	if result.Description != nil {
		message.Description = *result.Description
	}
	return message
}

// NewShowNotFoundError builds the gRPC error response type from the error of
// the "show" endpoint of the "roles" service.
func NewShowNotFoundError(er *roles.NotFound) *rolespb.ShowNotFoundError {
	message := &rolespb.ShowNotFoundError{
		Message_: er.Message,
		Id:       er.ID,
	}
	return message
}

// NewAddPayload builds the payload of the "add" endpoint of the "roles"
// service from the gRPC request type.
func NewAddPayload(message *rolespb.AddRequest) *roles.Role {
	v := &roles.Role{
		Name: message.Name,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	return v
}

// NewAddResponse builds the gRPC response type from the result of the "add"
// endpoint of the "roles" service.
func NewAddResponse(result string) *rolespb.AddResponse {
	message := &rolespb.AddResponse{}
	message.Field = result
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "roles"
// service from the gRPC request type.
func NewUpdatePayload(message *rolespb.UpdateRequest) *roles.Role {
	v := &roles.Role{
		Name: message.Name,
	}
	if message.Description != "" {
		v.Description = &message.Description
	}
	return v
}

// NewUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "roles" service.
func NewUpdateResponse(result string) *rolespb.UpdateResponse {
	message := &rolespb.UpdateResponse{}
	message.Field = result
	return message
}

// NewRemovePayload builds the payload of the "remove" endpoint of the "roles"
// service from the gRPC request type.
func NewRemovePayload(message *rolespb.RemoveRequest) *roles.RemovePayload {
	v := &roles.RemovePayload{
		Name: message.Name,
	}
	return v
}

// NewRemoveResponse builds the gRPC response type from the result of the
// "remove" endpoint of the "roles" service.
func NewRemoveResponse() *rolespb.RemoveResponse {
	message := &rolespb.RemoveResponse{}
	return message
}

// ValidateAddRequest runs the validations defined on AddRequest.
func ValidateAddRequest(message *rolespb.AddRequest) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.name", message.Name, "[a-z]+[a-z0-9]*"))
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *rolespb.UpdateRequest) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.name", message.Name, "[a-z]+[a-z0-9]*"))
	return
}
