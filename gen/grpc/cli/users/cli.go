// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users gRPC client CLI support package
//
// Command:
// $ goa gen users/design

package cli

import (
	"flag"
	"fmt"
	"os"
	rolesc "users/gen/grpc/roles/client"
	usersc "users/gen/grpc/users/client"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `users (list|show|add|update|remove|activate)
roles (list|show|add|update|remove)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` users list --view "default"` + "\n" +
		os.Args[0] + ` roles list --view "tiny"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		usersListViewFlag = usersListFlags.String("view", "", "")

		usersShowFlags       = flag.NewFlagSet("show", flag.ExitOnError)
		usersShowMessageFlag = usersShowFlags.String("message", "", "")
		usersShowViewFlag    = usersShowFlags.String("view", "", "")

		usersAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		usersAddMessageFlag = usersAddFlags.String("message", "", "")

		usersUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		usersUpdateMessageFlag = usersUpdateFlags.String("message", "", "")

		usersRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		usersRemoveMessageFlag = usersRemoveFlags.String("message", "", "")

		usersActivateFlags       = flag.NewFlagSet("activate", flag.ExitOnError)
		usersActivateMessageFlag = usersActivateFlags.String("message", "", "")

		rolesFlags = flag.NewFlagSet("roles", flag.ContinueOnError)

		rolesListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		rolesListViewFlag = rolesListFlags.String("view", "", "")

		rolesShowFlags       = flag.NewFlagSet("show", flag.ExitOnError)
		rolesShowMessageFlag = rolesShowFlags.String("message", "", "")
		rolesShowViewFlag    = rolesShowFlags.String("view", "", "")

		rolesAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		rolesAddMessageFlag = rolesAddFlags.String("message", "", "")

		rolesUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		rolesUpdateMessageFlag = rolesUpdateFlags.String("message", "", "")

		rolesRemoveFlags       = flag.NewFlagSet("remove", flag.ExitOnError)
		rolesRemoveMessageFlag = rolesRemoveFlags.String("message", "", "")
	)
	usersFlags.Usage = usersUsage
	usersListFlags.Usage = usersListUsage
	usersShowFlags.Usage = usersShowUsage
	usersAddFlags.Usage = usersAddUsage
	usersUpdateFlags.Usage = usersUpdateUsage
	usersRemoveFlags.Usage = usersRemoveUsage
	usersActivateFlags.Usage = usersActivateUsage

	rolesFlags.Usage = rolesUsage
	rolesListFlags.Usage = rolesListUsage
	rolesShowFlags.Usage = rolesShowUsage
	rolesAddFlags.Usage = rolesAddUsage
	rolesUpdateFlags.Usage = rolesUpdateUsage
	rolesRemoveFlags.Usage = rolesRemoveUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "users":
			svcf = usersFlags
		case "roles":
			svcf = rolesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "users":
			switch epn {
			case "list":
				epf = usersListFlags

			case "show":
				epf = usersShowFlags

			case "add":
				epf = usersAddFlags

			case "update":
				epf = usersUpdateFlags

			case "remove":
				epf = usersRemoveFlags

			case "activate":
				epf = usersActivateFlags

			}

		case "roles":
			switch epn {
			case "list":
				epf = rolesListFlags

			case "show":
				epf = rolesShowFlags

			case "add":
				epf = rolesAddFlags

			case "update":
				epf = rolesUpdateFlags

			case "remove":
				epf = rolesRemoveFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "users":
			c := usersc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = usersc.BuildListPayload(*usersListViewFlag)
			case "show":
				endpoint = c.Show()
				data, err = usersc.BuildShowPayload(*usersShowMessageFlag, *usersShowViewFlag)
			case "add":
				endpoint = c.Add()
				data, err = usersc.BuildAddPayload(*usersAddMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = usersc.BuildUpdatePayload(*usersUpdateMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = usersc.BuildRemovePayload(*usersRemoveMessageFlag)
			case "activate":
				endpoint = c.Activate()
				data, err = usersc.BuildActivatePayload(*usersActivateMessageFlag)
			}
		case "roles":
			c := rolesc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = rolesc.BuildListPayload(*rolesListViewFlag)
			case "show":
				endpoint = c.Show()
				data, err = rolesc.BuildShowPayload(*rolesShowMessageFlag, *rolesShowViewFlag)
			case "add":
				endpoint = c.Add()
				data, err = rolesc.BuildAddPayload(*rolesAddMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = rolesc.BuildUpdatePayload(*rolesUpdateMessageFlag)
			case "remove":
				endpoint = c.Remove()
				data, err = rolesc.BuildRemovePayload(*rolesRemoveMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `The users service performs user data.
Usage:
    %s [globalflags] users COMMAND [flags]

COMMAND:
    list: List all stored users
    show: Show user by Email
    add: Add new user and return email.
    update: Update existing user and return email.
    remove: Remove user from users data
    activate: Activate users by emails

Additional help:
    %s users COMMAND --help
`, os.Args[0], os.Args[0])
}
func usersListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users list -view STRING

List all stored users
    -view STRING: 

Example:
    `+os.Args[0]+` users list --view "default"
`, os.Args[0])
}

func usersShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users show -message JSON -view STRING

Show user by Email
    -message JSON: 
    -view STRING: 

Example:
    `+os.Args[0]+` users show --message '{
      "email": "Illo omnis ea sit nam."
   }' --view "tiny"
`, os.Args[0])
}

func usersAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users add -message JSON

Add new user and return email.
    -message JSON: 

Example:
    `+os.Args[0]+` users add --message '{
      "email": "ehabterra@hotmail.com",
      "firstname": "Ehab",
      "isactive": true,
      "lastname": "Terra",
      "role": "admin"
   }'
`, os.Args[0])
}

func usersUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users update -message JSON

Update existing user and return email.
    -message JSON: 

Example:
    `+os.Args[0]+` users update --message '{
      "email": "ehabterra@hotmail.com",
      "firstname": "Ehab",
      "isactive": false,
      "lastname": "Terra",
      "role": "admin"
   }'
`, os.Args[0])
}

func usersRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users remove -message JSON

Remove user from users data
    -message JSON: 

Example:
    `+os.Args[0]+` users remove --message '{
      "email": "Sapiente consequuntur modi nisi."
   }'
`, os.Args[0])
}

func usersActivateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] users activate -message JSON

Activate users by emails
    -message JSON: 

Example:
    `+os.Args[0]+` users activate --message '{
      "field": [
         "Possimus veniam iure.",
         "Autem autem."
      ]
   }'
`, os.Args[0])
}

// rolesUsage displays the usage of the roles command and its subcommands.
func rolesUsage() {
	fmt.Fprintf(os.Stderr, `The roles service performs role data.
Usage:
    %s [globalflags] roles COMMAND [flags]

COMMAND:
    list: List all stored roles
    show: Show role by name
    add: Add new role and return name.
    update: Update existing role and return name.
    remove: Remove role from roles data

Additional help:
    %s roles COMMAND --help
`, os.Args[0], os.Args[0])
}
func rolesListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] roles list -view STRING

List all stored roles
    -view STRING: 

Example:
    `+os.Args[0]+` roles list --view "tiny"
`, os.Args[0])
}

func rolesShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] roles show -message JSON -view STRING

Show role by name
    -message JSON: 
    -view STRING: 

Example:
    `+os.Args[0]+` roles show --message '{
      "name": "Unde consectetur nam."
   }' --view "tiny"
`, os.Args[0])
}

func rolesAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] roles add -message JSON

Add new role and return name.
    -message JSON: 

Example:
    `+os.Args[0]+` roles add --message '{
      "description": "Administrator",
      "name": "admin"
   }'
`, os.Args[0])
}

func rolesUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] roles update -message JSON

Update existing role and return name.
    -message JSON: 

Example:
    `+os.Args[0]+` roles update --message '{
      "description": "Administrator",
      "name": "admin"
   }'
`, os.Args[0])
}

func rolesRemoveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] roles remove -message JSON

Remove role from roles data
    -message JSON: 

Example:
    `+os.Args[0]+` roles remove --message '{
      "name": "Repellat unde dolores ut rerum."
   }'
`, os.Args[0])
}
