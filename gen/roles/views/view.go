// Code generated by goa v3.2.3, DO NOT EDIT.
//
// roles views
//
// Command:
// $ goa gen users/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// StoredRoleCollection is the viewed result type that is projected based on a
// view.
type StoredRoleCollection struct {
	// Type to project
	Projected StoredRoleCollectionView
	// View to render
	View string
}

// StoredRole is the viewed result type that is projected based on a view.
type StoredRole struct {
	// Type to project
	Projected *StoredRoleView
	// View to render
	View string
}

// StoredRoleCollectionView is a type that runs validations on a projected type.
type StoredRoleCollectionView []*StoredRoleView

// StoredRoleView is a type that runs validations on a projected type.
type StoredRoleView struct {
	// Name of role
	Name *string
	// Description of role
	Description *string
}

var (
	// StoredRoleCollectionMap is a map of attribute names in result type
	// StoredRoleCollection indexed by view name.
	StoredRoleCollectionMap = map[string][]string{
		"default": []string{
			"name",
			"description",
		},
		"tiny": []string{
			"name",
		},
	}
	// StoredRoleMap is a map of attribute names in result type StoredRole indexed
	// by view name.
	StoredRoleMap = map[string][]string{
		"default": []string{
			"name",
			"description",
		},
		"tiny": []string{
			"name",
		},
	}
)

// ValidateStoredRoleCollection runs the validations defined on the viewed
// result type StoredRoleCollection.
func ValidateStoredRoleCollection(result StoredRoleCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredRoleCollectionView(result.Projected)
	case "tiny":
		err = ValidateStoredRoleCollectionViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredRole runs the validations defined on the viewed result type
// StoredRole.
func ValidateStoredRole(result *StoredRole) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStoredRoleView(result.Projected)
	case "tiny":
		err = ValidateStoredRoleViewTiny(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "tiny"})
	}
	return
}

// ValidateStoredRoleCollectionView runs the validations defined on
// StoredRoleCollectionView using the "default" view.
func ValidateStoredRoleCollectionView(result StoredRoleCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredRoleView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredRoleCollectionViewTiny runs the validations defined on
// StoredRoleCollectionView using the "tiny" view.
func ValidateStoredRoleCollectionViewTiny(result StoredRoleCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateStoredRoleViewTiny(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStoredRoleView runs the validations defined on StoredRoleView using
// the "default" view.
func ValidateStoredRoleView(result *StoredRoleView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.name", *result.Name, "[a-z]+[a-z0-9]*"))
	}
	return
}

// ValidateStoredRoleViewTiny runs the validations defined on StoredRoleView
// using the "tiny" view.
func ValidateStoredRoleViewTiny(result *StoredRoleView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.name", *result.Name, "[a-z]+[a-z0-9]*"))
	}
	return
}
