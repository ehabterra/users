// Code generated by goa v3.2.3, DO NOT EDIT.
//
// roles HTTP server types
//
// Command:
// $ goa gen users/design

package server

import (
	roles "users/gen/roles"
	rolesviews "users/gen/roles/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "roles" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Name of role
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of role
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateRequestBody is the type of the "roles" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Description of role
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// StoredRoleResponseCollection is the type of the "roles" service "list"
// endpoint HTTP response body.
type StoredRoleResponseCollection []*StoredRoleResponse

// StoredRoleResponseTinyCollection is the type of the "roles" service "list"
// endpoint HTTP response body.
type StoredRoleResponseTinyCollection []*StoredRoleResponseTiny

// ShowResponseBody is the type of the "roles" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Name of role
	Name string `form:"name" json:"name" xml:"name"`
	// Description of role
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// ShowResponseBodyTiny is the type of the "roles" service "show" endpoint HTTP
// response body.
type ShowResponseBodyTiny struct {
	// Name of role
	Name string `form:"name" json:"name" xml:"name"`
}

// ShowNotFoundResponseBody is the type of the "roles" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// StoredRoleResponse is used to define fields on response body types.
type StoredRoleResponse struct {
	// Name of role
	Name string `form:"name" json:"name" xml:"name"`
	// Description of role
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// StoredRoleResponseTiny is used to define fields on response body types.
type StoredRoleResponseTiny struct {
	// Name of role
	Name string `form:"name" json:"name" xml:"name"`
}

// NewStoredRoleResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "roles" service.
func NewStoredRoleResponseCollection(res rolesviews.StoredRoleCollectionView) StoredRoleResponseCollection {
	body := make([]*StoredRoleResponse, len(res))
	for i, val := range res {
		body[i] = marshalRolesviewsStoredRoleViewToStoredRoleResponse(val)
	}
	return body
}

// NewStoredRoleResponseTinyCollection builds the HTTP response body from the
// result of the "list" endpoint of the "roles" service.
func NewStoredRoleResponseTinyCollection(res rolesviews.StoredRoleCollectionView) StoredRoleResponseTinyCollection {
	body := make([]*StoredRoleResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalRolesviewsStoredRoleViewToStoredRoleResponseTiny(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "roles" service.
func NewShowResponseBody(res *rolesviews.StoredRoleView) *ShowResponseBody {
	body := &ShowResponseBody{
		Name:        *res.Name,
		Description: res.Description,
	}
	return body
}

// NewShowResponseBodyTiny builds the HTTP response body from the result of the
// "show" endpoint of the "roles" service.
func NewShowResponseBodyTiny(res *rolesviews.StoredRoleView) *ShowResponseBodyTiny {
	body := &ShowResponseBodyTiny{
		Name: *res.Name,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "roles" service.
func NewShowNotFoundResponseBody(res *roles.NotFound) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewListPayload builds a roles service list endpoint payload.
func NewListPayload(view *string) *roles.ListPayload {
	v := &roles.ListPayload{}
	v.View = view

	return v
}

// NewShowPayload builds a roles service show endpoint payload.
func NewShowPayload(name string, view *string) *roles.ShowPayload {
	v := &roles.ShowPayload{}
	v.Name = name
	v.View = view

	return v
}

// NewAddRole builds a roles service add endpoint payload.
func NewAddRole(body *AddRequestBody) *roles.Role {
	v := &roles.Role{
		Name:        *body.Name,
		Description: body.Description,
	}

	return v
}

// NewUpdateRole builds a roles service update endpoint payload.
func NewUpdateRole(body *UpdateRequestBody, name string) *roles.Role {
	v := &roles.Role{
		Description: body.Description,
	}
	v.Name = name

	return v
}

// NewRemovePayload builds a roles service remove endpoint payload.
func NewRemovePayload(name string) *roles.RemovePayload {
	v := &roles.RemovePayload{}
	v.Name = name

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.name", *body.Name, "[a-z]+[a-z0-9]*"))
	}
	return
}
