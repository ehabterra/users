// Code generated by goa v3.2.3, DO NOT EDIT.
//
// roles HTTP client CLI support package
//
// Command:
// $ goa gen users/design

package client

import (
	"encoding/json"
	"fmt"
	roles "users/gen/roles"

	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the roles list endpoint from CLI
// flags.
func BuildListPayload(rolesListView string) (*roles.ListPayload, error) {
	var err error
	var view *string
	{
		if rolesListView != "" {
			view = &rolesListView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &roles.ListPayload{}
	v.View = view

	return v, nil
}

// BuildShowPayload builds the payload for the roles show endpoint from CLI
// flags.
func BuildShowPayload(rolesShowName string, rolesShowView string) (*roles.ShowPayload, error) {
	var err error
	var name string
	{
		name = rolesShowName
	}
	var view *string
	{
		if rolesShowView != "" {
			view = &rolesShowView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &roles.ShowPayload{}
	v.Name = name
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the roles add endpoint from CLI flags.
func BuildAddPayload(rolesAddBody string) (*roles.Role, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(rolesAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Administrator\",\n      \"name\": \"admin\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.name", body.Name, "[a-z]+[a-z0-9]*"))
		if err != nil {
			return nil, err
		}
	}
	v := &roles.Role{
		Name:        body.Name,
		Description: body.Description,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the roles update endpoint from CLI
// flags.
func BuildUpdatePayload(rolesUpdateBody string, rolesUpdateName string) (*roles.Role, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(rolesUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Administrator\"\n   }'")
		}
	}
	var name string
	{
		name = rolesUpdateName
		err = goa.MergeErrors(err, goa.ValidatePattern("name", name, "[a-z]+[a-z0-9]*"))
		if err != nil {
			return nil, err
		}
	}
	v := &roles.Role{
		Description: body.Description,
	}
	v.Name = name

	return v, nil
}

// BuildRemovePayload builds the payload for the roles remove endpoint from CLI
// flags.
func BuildRemovePayload(rolesRemoveName string) (*roles.RemovePayload, error) {
	var name string
	{
		name = rolesRemoveName
	}
	v := &roles.RemovePayload{}
	v.Name = name

	return v, nil
}
