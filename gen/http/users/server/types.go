// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users HTTP server types
//
// Command:
// $ goa gen users/design

package server

import (
	"unicode/utf8"
	users "users/gen/users"
	usersviews "users/gen/users/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "users" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First Name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last Name of user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// user role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// Is user active.
	Isactive *bool `form:"isactive,omitempty" json:"isactive,omitempty" xml:"isactive,omitempty"`
}

// UpdateRequestBody is the type of the "users" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// First Name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last Name of user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// user role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// Is user active.
	Isactive *bool `form:"isactive,omitempty" json:"isactive,omitempty" xml:"isactive,omitempty"`
}

// StoredUserResponseCollection is the type of the "users" service "list"
// endpoint HTTP response body.
type StoredUserResponseCollection []*StoredUserResponse

// StoredUserResponseTinyCollection is the type of the "users" service "list"
// endpoint HTTP response body.
type StoredUserResponseTinyCollection []*StoredUserResponseTiny

// ShowResponseBody is the type of the "users" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// user role
	Role string `form:"role" json:"role" xml:"role"`
	// First Name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last Name of user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// Is user active.
	Isactive bool `form:"isactive" json:"isactive" xml:"isactive"`
}

// ShowResponseBodyTiny is the type of the "users" service "show" endpoint HTTP
// response body.
type ShowResponseBodyTiny struct {
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// user role
	Role string `form:"role" json:"role" xml:"role"`
	// Is user active.
	Isactive bool `form:"isactive" json:"isactive" xml:"isactive"`
}

// ShowNotFoundResponseBody is the type of the "users" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// ID of missing user
	ID string `form:"id" json:"id" xml:"id"`
}

// StoredUserResponse is used to define fields on response body types.
type StoredUserResponse struct {
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// user role
	Role string `form:"role" json:"role" xml:"role"`
	// First Name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last Name of user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// Is user active.
	Isactive bool `form:"isactive" json:"isactive" xml:"isactive"`
}

// StoredUserResponseTiny is used to define fields on response body types.
type StoredUserResponseTiny struct {
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// user role
	Role string `form:"role" json:"role" xml:"role"`
	// Is user active.
	Isactive bool `form:"isactive" json:"isactive" xml:"isactive"`
}

// NewStoredUserResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "users" service.
func NewStoredUserResponseCollection(res usersviews.StoredUserCollectionView) StoredUserResponseCollection {
	body := make([]*StoredUserResponse, len(res))
	for i, val := range res {
		body[i] = marshalUsersviewsStoredUserViewToStoredUserResponse(val)
	}
	return body
}

// NewStoredUserResponseTinyCollection builds the HTTP response body from the
// result of the "list" endpoint of the "users" service.
func NewStoredUserResponseTinyCollection(res usersviews.StoredUserCollectionView) StoredUserResponseTinyCollection {
	body := make([]*StoredUserResponseTiny, len(res))
	for i, val := range res {
		body[i] = marshalUsersviewsStoredUserViewToStoredUserResponseTiny(val)
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "users" service.
func NewShowResponseBody(res *usersviews.StoredUserView) *ShowResponseBody {
	body := &ShowResponseBody{
		Email:     *res.Email,
		Firstname: *res.Firstname,
		Lastname:  *res.Lastname,
		Role:      *res.Role,
	}
	if res.Isactive != nil {
		body.Isactive = *res.Isactive
	}
	if res.Isactive == nil {
		body.Isactive = true
	}
	return body
}

// NewShowResponseBodyTiny builds the HTTP response body from the result of the
// "show" endpoint of the "users" service.
func NewShowResponseBodyTiny(res *usersviews.StoredUserView) *ShowResponseBodyTiny {
	body := &ShowResponseBodyTiny{
		Email: *res.Email,
		Role:  *res.Role,
	}
	if res.Isactive != nil {
		body.Isactive = *res.Isactive
	}
	if res.Isactive == nil {
		body.Isactive = true
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "users" service.
func NewShowNotFoundResponseBody(res *users.NotFound) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewListPayload builds a users service list endpoint payload.
func NewListPayload(view *string) *users.ListPayload {
	v := &users.ListPayload{}
	v.View = view

	return v
}

// NewShowPayload builds a users service show endpoint payload.
func NewShowPayload(email string, view *string) *users.ShowPayload {
	v := &users.ShowPayload{}
	v.Email = email
	v.View = view

	return v
}

// NewAddUser builds a users service add endpoint payload.
func NewAddUser(body *AddRequestBody) *users.User {
	v := &users.User{
		Email:     *body.Email,
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
		Role:      *body.Role,
	}
	if body.Isactive != nil {
		v.Isactive = *body.Isactive
	}
	if body.Isactive == nil {
		v.Isactive = true
	}

	return v
}

// NewUpdateUser builds a users service update endpoint payload.
func NewUpdateUser(body *UpdateRequestBody, email string) *users.User {
	v := &users.User{
		Firstname: *body.Firstname,
		Lastname:  *body.Lastname,
		Role:      *body.Role,
	}
	if body.Isactive != nil {
		v.Isactive = *body.Isactive
	}
	if body.Isactive == nil {
		v.Isactive = true
	}
	v.Email = email

	return v
}

// NewRemovePayload builds a users service remove endpoint payload.
func NewRemovePayload(email string) *users.RemovePayload {
	v := &users.RemovePayload{}
	v.Email = email

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", *body.Email, ".+@.+\\..{1,6}"))
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 100, false))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 100, false))
		}
	}
	if body.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.role", *body.Role, "[a-z]+[a-z0-9]*"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 100, false))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 100, false))
		}
	}
	if body.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.role", *body.Role, "[a-z]+[a-z0-9]*"))
	}
	return
}
