// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen users/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"
	users "users/gen/users"

	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the users list endpoint from CLI
// flags.
func BuildListPayload(usersListView string) (*users.ListPayload, error) {
	var err error
	var view *string
	{
		if usersListView != "" {
			view = &usersListView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &users.ListPayload{}
	v.View = view

	return v, nil
}

// BuildShowPayload builds the payload for the users show endpoint from CLI
// flags.
func BuildShowPayload(usersShowEmail string, usersShowView string) (*users.ShowPayload, error) {
	var err error
	var email string
	{
		email = usersShowEmail
	}
	var view *string
	{
		if usersShowView != "" {
			view = &usersShowView
			if view != nil {
				if !(*view == "default" || *view == "tiny") {
					err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
				}
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &users.ShowPayload{}
	v.Email = email
	v.View = view

	return v, nil
}

// BuildAddPayload builds the payload for the users add endpoint from CLI flags.
func BuildAddPayload(usersAddBody string) (*users.User, error) {
	var err error
	var body AddRequestBody
	{
		err = json.Unmarshal([]byte(usersAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"ehabterra@hotmail.com\",\n      \"firstname\": \"Ehab\",\n      \"isactive\": true,\n      \"lastname\": \"Terra\",\n      \"role\": \"admin\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", body.Email, ".+@.+\\..{1,6}"))
		if utf8.RuneCountInString(body.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", body.Firstname, utf8.RuneCountInString(body.Firstname), 100, false))
		}
		if utf8.RuneCountInString(body.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", body.Lastname, utf8.RuneCountInString(body.Lastname), 100, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.role", body.Role, "[a-z]+[a-z0-9]*"))
		if err != nil {
			return nil, err
		}
	}
	v := &users.User{
		Email:     body.Email,
		Firstname: body.Firstname,
		Lastname:  body.Lastname,
		Role:      body.Role,
		Isactive:  body.Isactive,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the users update endpoint from CLI
// flags.
func BuildUpdatePayload(usersUpdateBody string, usersUpdateEmail string) (*users.User, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"firstname\": \"Ehab\",\n      \"isactive\": false,\n      \"lastname\": \"Terra\",\n      \"role\": \"admin\"\n   }'")
		}
		if utf8.RuneCountInString(body.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", body.Firstname, utf8.RuneCountInString(body.Firstname), 100, false))
		}
		if utf8.RuneCountInString(body.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", body.Lastname, utf8.RuneCountInString(body.Lastname), 100, false))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.role", body.Role, "[a-z]+[a-z0-9]*"))
		if err != nil {
			return nil, err
		}
	}
	var email string
	{
		email = usersUpdateEmail
		err = goa.MergeErrors(err, goa.ValidatePattern("email", email, ".+@.+\\..{1,6}"))
		if err != nil {
			return nil, err
		}
	}
	v := &users.User{
		Firstname: body.Firstname,
		Lastname:  body.Lastname,
		Role:      body.Role,
		Isactive:  body.Isactive,
	}
	v.Email = email

	return v, nil
}

// BuildRemovePayload builds the payload for the users remove endpoint from CLI
// flags.
func BuildRemovePayload(usersRemoveEmail string) (*users.RemovePayload, error) {
	var email string
	{
		email = usersRemoveEmail
	}
	v := &users.RemovePayload{}
	v.Email = email

	return v, nil
}
