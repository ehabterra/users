// Code generated by goa v3.2.3, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen users/design

package client

import (
	"unicode/utf8"
	users "users/gen/users"
	usersviews "users/gen/users/views"

	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "users" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Email of the user
	Email string `form:"email" json:"email" xml:"email"`
	// First Name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last Name of user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// user role
	Role string `form:"role" json:"role" xml:"role"`
	// Is user active.
	Isactive bool `form:"isactive" json:"isactive" xml:"isactive"`
}

// UpdateRequestBody is the type of the "users" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// First Name of the user
	Firstname string `form:"firstname" json:"firstname" xml:"firstname"`
	// Last Name of user
	Lastname string `form:"lastname" json:"lastname" xml:"lastname"`
	// user role
	Role string `form:"role" json:"role" xml:"role"`
	// Is user active.
	Isactive bool `form:"isactive" json:"isactive" xml:"isactive"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody []*StoredUserResponse

// ShowResponseBody is the type of the "users" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First Name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last Name of user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// Is user active.
	Isactive *bool `form:"isactive,omitempty" json:"isactive,omitempty" xml:"isactive,omitempty"`
	// user role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "users" service "show" endpoint
// HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// ID of missing user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// StoredUserResponse is used to define fields on response body types.
type StoredUserResponse struct {
	// Email of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First Name of the user
	Firstname *string `form:"firstname,omitempty" json:"firstname,omitempty" xml:"firstname,omitempty"`
	// Last Name of user
	Lastname *string `form:"lastname,omitempty" json:"lastname,omitempty" xml:"lastname,omitempty"`
	// Is user active.
	Isactive *bool `form:"isactive,omitempty" json:"isactive,omitempty" xml:"isactive,omitempty"`
	// user role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "users" service.
func NewAddRequestBody(p *users.User) *AddRequestBody {
	body := &AddRequestBody{
		Email:     p.Email,
		Firstname: p.Firstname,
		Lastname:  p.Lastname,
		Role:      p.Role,
		Isactive:  p.Isactive,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "users" service.
func NewUpdateRequestBody(p *users.User) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Firstname: p.Firstname,
		Lastname:  p.Lastname,
		Role:      p.Role,
		Isactive:  p.Isactive,
	}
	return body
}

// NewListStoredUserCollectionOK builds a "users" service "list" endpoint
// result from a HTTP "OK" response.
func NewListStoredUserCollectionOK(body ListResponseBody) usersviews.StoredUserCollectionView {
	v := make([]*usersviews.StoredUserView, len(body))
	for i, val := range body {
		v[i] = unmarshalStoredUserResponseToUsersviewsStoredUserView(val)
	}
	return v
}

// NewShowStoredUserOK builds a "users" service "show" endpoint result from a
// HTTP "OK" response.
func NewShowStoredUserOK(body *ShowResponseBody) *usersviews.StoredUserView {
	v := &usersviews.StoredUserView{
		Email:     body.Email,
		Firstname: body.Firstname,
		Lastname:  body.Lastname,
		Isactive:  body.Isactive,
		Role:      body.Role,
	}
	if body.Isactive == nil {
		var tmp bool = true
		v.Isactive = &tmp
	}

	return v
}

// NewShowNotFound builds a users service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *users.NotFound {
	v := &users.NotFound{
		Message: *body.Message,
		ID:      *body.ID,
	}

	return v
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}

// ValidateStoredUserResponse runs the validations defined on StoredUserResponse
func ValidateStoredUserResponse(body *StoredUserResponse) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Firstname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstname", "body"))
	}
	if body.Lastname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastname", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.email", *body.Email, ".+@.+\\..{1,6}"))
	}
	if body.Firstname != nil {
		if utf8.RuneCountInString(*body.Firstname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstname", *body.Firstname, utf8.RuneCountInString(*body.Firstname), 100, false))
		}
	}
	if body.Lastname != nil {
		if utf8.RuneCountInString(*body.Lastname) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastname", *body.Lastname, utf8.RuneCountInString(*body.Lastname), 100, false))
		}
	}
	if body.Role != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.role", *body.Role, "[a-z]+[a-z0-9]*"))
	}
	return
}
